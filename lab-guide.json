[{"id":"1","name":"Prometheus Lab","content":"<h2 id=\"prometheuslab\">Prometheus Lab</h2>\n<p>This lab focuses on deploying a sample application on Kubernetes, integrating Dynatrace with Kubernetes, and then deploying Prometheus on Kubernetes to report on Prometheus metrics. <br></p>\n<ul>\n<li>Installing an ActiveGate on the Kubernetes cluster</li>\n<li>Installing the OneAgent Operator on the Kubernetes cluster using Helm</li>\n<li>Running the sample bank application on the Kubernetes cluster</li>\n<li>Creating an account on the sample application</li>\n<li>Integrating the Kubernetes cluster with Dynatrace</li>\n<li>Installing Prometheus on Kubernetes using helm and enabling the exporters</li>\n<li>Annotating the exporter pods so Dynatrace can collect metrics from Prometheus</li>\n<li>Learning the benefits of why you should push metrics</li>\n<li>Setting up custom alerts on Prometheus metrics</li>\n<li>Triggering an alert with a load generating script</li>\n</ul>","activityList":[]},{"id":"2","name":"Session Objectives","content":"<h2 id=\"sessionobjectives\">Session Objectives</h2>\n<p>During the session, we will attend the following objectives on the provided kubernetes cluster:</p>\n<ol>\n<li>Cluster wide instrumentation using the <strong>OneAgent Operator</strong>.</li>\n<li>Walkthrough different components in the Kubernetes Cluster-view.</li>\n<li>Deploying the <strong>sample-bank</strong> app on the kubernetes cluster comprising of a node and MongoDB pod.</li>\n<li>Start a <strong>Prometheus server</strong> with node and MongoDB exporters to pull data from the sample-bank application.</li>\n<li>Configure exporters to push <strong>Prometheus data</strong> into Dynatrace.</li>\n<li>Walkthrough the benefits/use-cases of pushing the Prometheus data in Dynatrace.</li>\n<li>Setting up the Prometheus data on a dashboard and setting up alerts using <strong>Davis AI auto-detected baseline</strong> for the metrics.</li>\n</ol>","activityList":[]},{"id":"3","name":"Install Dynatrace ActiveGate and OneAgent Operator","content":"<h2 id=\"installdynatraceactivegateandoneagentoperator\">Install Dynatrace ActiveGate and OneAgent Operator</h2>\n<p>Connect to your Kubernetes cluster using the following credentials:\n<strong>Username</strong>: <code>dynatrace</code>\n<strong>Password</strong>: <code>dynatrace</code></p>\n<p>Now, become the root user by running <code>sudo su</code>\n<em>Hint</em>: Password for sudo su is 'dynatrace'.</p>\n<h3 id=\"setupenvironmentactivegate\">Setup Environment activeGate</h3>\n<p>In this step we will install environment activeGate with Kubernetes module enabled.</p>\n<p>To install activeGate, follow the steps as below:</p>\n<ol>\n<li>Navigate to Deploy Hub under the manage section from the menu on the left</li>\n<li>Click on Activegate at the bottom of the page</li>\n<li>Click on Install Activegate</li>\n<li>Click on Linux</li>\n<li>Click on create token and copy and paste this somewhere as this will be needed later on.</li>\n<li>Copy Step 2 from Dynatrace and paste into your kubernetes cluster.</li>\n<li>Copy Step 4 from Dynatrace and append \"sudo\" (installing as root) onto kubernetes cluster.</li>\n</ol>\n<p><img src=\"assets/ActiveGate-install-1.png\" alt=\"image\" />\n<img src=\"assets/ActiveGate-install-2.png\" alt=\"image\" /></p>\n<p><br></p>\n<p>Once completed, navigate to deployment status and click on Activegates. You should see your Activegate deployed here.</p>\n<p><br></p>\n<p><img src=\"assets/AG-deployment-status.png\" alt=\"image\" /></p>","activityList":[]},{"id":"4","name":"Oneagent Operator Installation","content":"<h2 id=\"oneagentoperatorinstallation\">Oneagent Operator Installation</h2>\n<p>In this step, install the OneAgent Operator on your Kubernetes cluster so that the OneAgent can report and collect metrics from different pods. Dynatrace support multiple deployment strategies to install the OneAgent Operator, for Kubernetes integration. In this tutorial, we will use the Helm approach.</p>\n<p>Before we install the OneAgent Operator, make sure the kubectl config is accessible to the user by running the following as a <strong>root</strong> user:</p>\n<pre><code class=\"hljs\">$ kubectl config view --raw &gt; <span class=\"hljs-regexp\">/home/u</span>buntu<span class=\"hljs-regexp\">/.kube/</span>config\n$ kubectl config view --raw &gt; ~<span class=\"hljs-regexp\">/.kube/</span>config\n</code></pre>\n<p>Then we need to create an API Token, in Dynatrace navigate to:</p>\n<ol>\n<li>Settings</li>\n<li>Integration</li>\n<li>Dynatrace API</li>\n<li>Click Generate token</li>\n<li>Name the token Prometheus-Integration-Lab</li>\n<li>Make sure you have the following permissions for the token selected:\na. Write config\nb. Read config\nc. Access problem and event feed, metrics, and topology</li>\n<li>Generate the token</li>\n<li>Copy this token down somewhere handy as this will be needing it later.\n<img src=\"assets/API-token.png\" alt=\"image\" /></li>\n</ol>\n<p>Similarly, navigate to <strong>Settings > Integration > Platform as a Service</strong> to create a PaaS token and copy the token value in a temporary file.\n<img src=\"assets/PaaS-token.png\" alt=\"image\" /></p>\n<p>To install helm follow the steps below:</p>\n<ol>\n<li>Use the following command to install Helm</li>\n</ol>\n<pre><code class=\"hljs\">$ sudo snap install helm <span class=\"hljs-comment\">--classic</span>\n</code></pre>\n<ol start=\"2\">\n<li>Once Helm is installed, run this command to add the Dynatrace OneAgent Helm repository:</li>\n</ol>\n<pre><code class=\"hljs\">$ helm repo add dynatrace https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/Dynatrace/</span>helm-charts<span class=\"hljs-regexp\">/master/</span>repos/stable\n</code></pre>\n<ol start=\"3\">\n<li>Create a namespace called <em>dynatrace</em> which will hold the operator deployment and it's dependencies. To create the namespace, run the command below with sudo:</li>\n</ol>\n<pre><code class=\"hljs\">$ kubectl create <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-symbol\">dynatrace</span>\n</code></pre>\n<ol start=\"4\">\n<li>Create a values.yaml with the text as below:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">platform:</span> <span class=\"hljs-string\">&quot;kubernetes&quot;</span>\n<span class=\"hljs-symbol\">operator:</span>\n<span class=\"hljs-symbol\">image:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">oneagent:</span>\n<span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">&quot;oneagent&quot;</span>\n<span class=\"hljs-symbol\">apiUrl:</span> <span class=\"hljs-string\">&quot;https://ENVIRONMENTID.live.dynatrace.com/api&quot;</span>\n<span class=\"hljs-symbol\">image:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">args:</span>\n- --<span class=\"hljs-keyword\">set</span>-app-log-content-access=true\n<span class=\"hljs-symbol\">env:</span> {}\n<span class=\"hljs-symbol\">nodeSelector:</span> {}\n<span class=\"hljs-symbol\">labels:</span> {}\n<span class=\"hljs-symbol\">skipCertCheck:</span> false\n<span class=\"hljs-symbol\">disableAgentUpdate:</span> false\n<span class=\"hljs-symbol\">enableIstio:</span> false\n<span class=\"hljs-symbol\">dnsPolicy:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">resources:</span> {}\n<span class=\"hljs-symbol\">waitReadySeconds:</span> null\n<span class=\"hljs-symbol\">priorityClassName:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">serviceAccountName:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">proxy:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">trustedCAs:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-symbol\">secret:</span>\n<span class=\"hljs-symbol\">apiToken:</span> <span class=\"hljs-string\">&quot;DYNATRACE_API_TOKEN&quot;</span>\n<span class=\"hljs-symbol\">paasToken:</span> <span class=\"hljs-string\">&quot;PLATFORM_AS_A_SERVICE_TOKEN&quot;</span>\n</code></pre>\n<p>Replace the apiToken and paasToken configurables with the values noted down earlier and set apiURL to point to your tenant.</p>\n<ul>\n<li><p>For SaaS, configure apiUrl as https://ENVIRONMENTID.live.dynatrace.com/api, where ENVIRONMENTID is your tenant-id <br></p></li>\n<li><p>For a Managed cluster, use the following apiUrl, https://my-server/ENVIRONMENTID/api, where my-server is the domain name/ip of your server and ENVIRONMENTID is your managed environment. Once replaced, save and exit the file.</p></li>\n</ul>\n<ol>\n<li>Lastly, run the command below with sudo to apply the YAML</li>\n</ol>\n<p><code>$ helm install dynatrace-oneagent-operator dynatrace/dynatrace-oneagent-operator -n dynatrace --values values.yaml</code></p>\n<p>Once succesful, you will get a prompt similar to the below and you will see the host appearing when you click on <strong>Show Deployment status</strong></p>\n<pre><code class=\"hljs\">NAME: dynatrace-oneagent-operator\nLAST DEPLOYED: Wed Mar 03 02:01:30 2021\nNAMESPACE: dynatrace\nSTATUS: deployed\nREVISION: 1\n<span class=\"hljs-keyword\">TEST </span>SUITE: None\nNOTES:\nThank you for installing dynatrace-oneagent-operator.\n\nYour release is named dynatrace-oneagent-operator.\n</code></pre>","activityList":[]},{"id":"5","name":"Start the sample-application","content":"<h2 id=\"startthesampleapplication\">Start the sample-application</h2>\n<p>Navigate to <code>/home/ubuntu/k8s</code> folder by using the following command:</p>\n<pre><code class=\"hljs\">$ cd <span class=\"hljs-regexp\">/home/u</span>buntu/k8s\n</code></pre>\n<p>In that folder you will be able to view the yaml files for front-end and mongodb deployment. In order to deploy the services and deployment, run the following commands:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$</span> kubectl apply <span class=\"hljs-literal\">-n</span> dynatrace <span class=\"hljs-operator\">-f</span> app<span class=\"hljs-literal\">-deployment</span>.yaml\n\n<span class=\"hljs-variable\">$</span> kubectl apply <span class=\"hljs-literal\">-n</span> dynatrace <span class=\"hljs-operator\">-f</span> mongo<span class=\"hljs-literal\">-deployment</span>.yaml\n\n<span class=\"hljs-variable\">$</span> kubectl apply <span class=\"hljs-literal\">-n</span> dynatrace <span class=\"hljs-operator\">-f</span> mongo<span class=\"hljs-literal\">-service</span>.yaml\n\n<span class=\"hljs-variable\">$</span> kubectl apply <span class=\"hljs-literal\">-n</span> dynatrace <span class=\"hljs-operator\">-f</span> app<span class=\"hljs-literal\">-service</span>.yaml\n</code></pre>\n<p>This will create the deployment and services for all components for the application. Further, your service will now be accessible via NodePort.</p>\n<p>Verify the service is up and running as expected using command below.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">$</span> kubectl describe service <span class=\"hljs-keyword\">model</span>-app -n dynatrace\n</code></pre>\n<p><img src=\"assets/expose-model-app.png\" alt=\"image\" /></p>\n<p>Note down the Nodeport and connect to the application on browser using <strong>Instance-ip:NodePort</strong></p>\n<h3 id=\"troubleshootingsteps\">⚠️ Troubleshooting steps</h3>\n<p>Negative\n: To <strong>check status of pods</strong>, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>$ kubectl get pods -n dynatrace</code></p>\n<p>Negative\n: To <strong>check the logs</strong>, run command below.<br>\n<code>$ kubectl logs -f deployment/dynatrace-oneagent-operator -n dynatrace</code></p>\n<p>Negative\n: To <strong>delete secrets</strong>, run command below. You might have included a wrong secret previously. <br>\n<code>$ kubectl delete secret --all -n dynatrace</code></p>\n<p>Negative\n: To <strong>delete all pods</strong>, run command below. This will cycle through the pods and you will have new pod instances.<br>\n<code>$ kubectl delete --all pods -n dynatrace</code></p>\n<p>Negative\n: To <strong>check status of deployments</strong>, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>$ kubectl get deployments -n dynatrace</code></p>\n<p>Negative\n: To <strong>check status of services</strong>, run command below. You should get a <strong>Running</strong> as a return.<br>\n<code>$ kubectl get deployments -n dynatrace</code></p>\n<p>Negative\n: To <strong>delete a service</strong>, run command below.<br>\n<code>$ kubectl delete service &lt;serviceName&gt; -n dynatrace</code></p>\n<p>Negative\n: If the pods are not running run <code>microk8s stop</code> and then <code>microk8s start</code> to restart the node.</p>\n<p>Negative\n: Official troubleshooting page could be found <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/google-cloud-platform/google-kubernetes-engine/installation-and-operation/full-stack/troubleshoot-oneagent-on-google-kubernetes-engine/\">here</a></p>","activityList":[]},{"id":"6","name":"Accessing the Application","content":"<h2 id=\"accessingtheapplication\">Accessing the Application</h2>\n<p>To access the application and register a user, navigate to <code>http://AWS-IP:{NodePort}/register</code> on the browser and insert the following details:</p>\n<ul>\n<li><strong>Name</strong>: Guest User</li>\n<li><strong>E-Mail Address</strong>: guestuser@mybank.com</li>\n<li><strong>Password</strong>: GuestUser12@</li>\n<li><strong>Name</strong>: 123456789</li>\n</ul>\n<p><img src=\"assets/register-user-app.png\" alt=\"image\" /></p>\n<p>Once you have completed registering yourself on the application, go to this link http://AWS-IP:NodePort/login and log into the application with the credentials below:</p>\n<ul>\n<li><strong>E-Mail Address</strong>: guestuser@mybank.com</li>\n<li><strong>Password</strong>: GuestUser12@</li>\n</ul>","activityList":[]},{"id":"7","name":"Setting up the Kubernetes Integration","content":"<h2 id=\"settingupthekubernetesintegration\">Setting up the Kubernetes Integration</h2>\n<p>In this step, you will be integrating your Kubernetes cluster with Dynatrace. The integration would give us a quick view of the environment/pods running on your Kubernetes cluster.</p>\n<h3 id=\"createaserviceaccountandclusterrole\">Create a Service Account and Cluster role</h3>\n<p>Create a service account and cluster role for accessing the Kubernetes API. This creates the bearer token necessary to authenticate in the Kubernetes API. Use the following snippet in your shell terminal.</p>\n<pre><code class=\"hljs\">$ kubectl apply -f https:<span class=\"hljs-regexp\">//</span>www.dynatrace.com<span class=\"hljs-regexp\">/support/</span>help<span class=\"hljs-regexp\">/codefiles/</span>kubernetes/kubernetes-monitoring-service-account.yaml\n</code></pre>\n<h3 id=\"setupyourkubernetesintegration\">Setup your Kubernetes Integration</h3>\n<p>Go to <strong>Settings -> Cloud and Virtualization -> Kubernetes -> Connect new cluster</strong></p>\n<h3 id=\"getthekubernetesapiurl\">Get the Kubernetes API URL</h3>\n<p>Enter the command below and copy the result for the <strong>Kubernetes API URL</strong>.</p>\n<pre><code class=\"hljs\">$ kubectl config view <span class=\"hljs-params\">--minify</span> -o jsonpath=&#x27;{<span class=\"hljs-string\">.clusters</span>[0]<span class=\"hljs-string\">.cluster.server</span>}&#x27;\n</code></pre>\n<h3 id=\"getthebearertoken\">Get the Bearer Token</h3>\n<p>Enter the below command and copy the result for the <strong>Kubernetes Bearer Token</strong>.</p>\n<pre><code class=\"hljs\">$ kubectl get secret <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">kubectl</span> <span class=\"hljs-params\">get</span> <span class=\"hljs-params\">sa</span> <span class=\"hljs-params\">dynatrace</span>-<span class=\"hljs-params\">monitoring</span> -<span class=\"hljs-params\">o</span> <span class=\"hljs-params\">jsonpath</span>=&#x27;{.<span class=\"hljs-params\">secrets</span>[0].<span class=\"hljs-params\">name</span>}&#x27; -<span class=\"hljs-params\">n</span> <span class=\"hljs-params\">dynatrace</span>)</span> -o jsonpath=&#x27;{.data.token}&#x27; -n dynatrace <span class=\"hljs-pattern-match\">| base64 --decode\n</span></code></pre>\n<h3 id=\"integrateyourkubernetesclusterwithdynatrace\">Integrate your Kubernetes cluster with Dynatrace</h3>\n<ol>\n<li>Go to <strong>Settings > Cloud and virtualization > Kubernetes.</strong></li>\n<li>Select Connect new cluster.</li>\n<li>Provide a Name say \"K8s-cluster\", Kubernetes API URL (retrieved from \"Get the Kubernetes API URL\" step above), and the Bearer token (retrieved from \"Get the Bearer Token\" step above) for the Kubernetes cluster.</li>\n</ol>\n<blockquote>\n  <p><strong>Note: Make sure you have configured as below:</strong></p>\n</blockquote>\n<p><img src=\"assets/K8s-cluster1.png\" alt=\"image\" /></p>\n<p>Once successfully connected, click on Kubernetes on the left menu and explore the Kubernetes UI.</p>\n<p><img src=\"assets/K8s-view.png\" alt=\"image\" /></p>\n<p>Navigate to Dashboards in Dynatrace. There will preset Kubernetes dashboards available in your tenant to view.</p>\n<p><img src=\"assets/K8s-preset-dashboard.png\" alt=\"image\" /></p>","activityList":[]},{"id":"8","name":"Installing Prometheus and Enabling Exporters","content":"<h2 id=\"installingprometheusandenablingexporters\">Installing Prometheus and Enabling Exporters</h2>\n<p>In this step, you will be installing prometheus on the Kubernetes cluster so that it can monitor the application pods using node-exporter and mangodb-exporter.</p>\n<p>Navigate back to shell and execute the commands below:</p>\n<pre><code class=\"hljs sh language-sh\">$ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\n$ helm repo update\n\n$ helm install prometheus-node-exporter prometheus-community/prometheus-node-exporter\n</code></pre>\n<p>Once executed, prometheus-node-exporter along with other prometheus pods would be installed in default namespace automatically on your kubernetes cluster.</p>\n<p>Positive\n: To view the installed pods, execute <code>$ kubectl get pods</code></p>\n<h3 id=\"annotatemongodbexporter\">Annotate mongodb-exporter</h3>\n<p>Prometheus will have the mongodb-exporter already added on your Helm prometheus-community. You will need the Cluster-IP for the mongodb service to configure Prometheus so that it collects metrics from mongodb-exporter, run the following command:</p>\n<pre><code class=\"hljs bash language-bash\">$ kubectl describe service -n dynatrace mongo\n</code></pre>\n<p><img src=\"assets/clusterIP-mongodb.png\" alt=\"image\" /></p>\n<blockquote>\n  <p><strong>Note</strong>: Keep the clusterIP handy, we will need this while setting up the mongodb-exporter.</p>\n</blockquote>\n<p>This will run the mongodb-exporter pod in your kubernetes cluster.</p>\n<pre><code class=\"hljs\">$ helm <span class=\"hljs-keyword\">install</span> prometheus-mongo prometheus-community/prometheus-mongodb-exporter --<span class=\"hljs-keyword\">set</span> mongodb.uri=mongodb://d1prumworkshop:password@clusterip:<span class=\"hljs-number\">27017</span>/?authSource=admin,serviceMonitor.enabled=<span class=\"hljs-keyword\">false</span> --<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-keyword\">string</span> podAnnotations.<span class=\"hljs-string\">&quot;prometheus.io/scrape&quot;</span>=<span class=\"hljs-keyword\">true</span>  --<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-keyword\">string</span> podAnnotations.<span class=\"hljs-string\">&quot;prometheus.io/port&quot;</span>=<span class=\"hljs-number\">9108</span>\n</code></pre>\n<blockquote>\n  <p><strong>Note</strong>: Replace the cluster-ip with the IP listed from our earlier step before running the command.</p>\n</blockquote>\n<p><img src=\"assets/mongodb-exporter.png\" alt=\"image\" /></p>\n<p>Positive\n: You will be able to view all the prometheus pods running in your cluster  by executing:  <code>$ kubectl get pods -A</code></p>","activityList":[]},{"id":"9","name":"Prometheus Metrics in Dynatrace","content":"<h2 id=\"prometheusmetricsindynatrace\">Prometheus Metrics in Dynatrace</h2>\n<p>In this step, we will annotate the pods to start pushing the prometheus metrics to Dynatrace.</p>\n<p>Annotate the mongodb-exporter or/and node-exporter so that oneagent running on the cluster push prometheus metrics to dynatrace tenant.</p>\n<p><img src=\"assets/annotate-mongodb-exporter.png\" alt=\"image\" /></p>\n<p>Copy the mongodb-exporter pod details and annotate them using command below. Replace the mongodb-exporter string with the actual pod name.<br><br></p>\n<pre><code class=\"hljs\">$ kubectl annotate pod mongodb-exporter metrics.dynatrace.com/<span class=\"hljs-attribute\">scrape</span>=<span class=\"hljs-literal\">true</span> <span class=\"hljs-attribute\">--namespace</span>=default\n$ kubectl annotate pod mongodb-exporter metrics.dynatrace.com/<span class=\"hljs-attribute\">port</span>=9216 <span class=\"hljs-attribute\">--namespace</span>=default\n</code></pre>\n<p>Positive\n: If you want to limit the metrics being pushed by Prometheus exporter to Dynatrace, annotate the below json to the exporter pod</p>\n<pre><code class=\"hljs\">metrics<span class=\"hljs-selector-class\">.dynatrace</span><span class=\"hljs-selector-class\">.com</span>/<span class=\"hljs-attribute\">filter</span>: |\n{\n<span class=\"hljs-string\">&quot;mode&quot;</span>: <span class=\"hljs-string\">&quot;include&quot;</span>,\n<span class=\"hljs-string\">&quot;names&quot;</span>: [\n<span class=\"hljs-string\">&quot;metrics-name-1&quot;</span>,\n<span class=\"hljs-string\">&quot;metrics-name-2&quot;</span>,\n]\n}\n</code></pre>\n<p>Replace the metrics-name-1, metrics-name-2, etc with the appropriate name which will ascertain only the configured metrics are pushed through.  For annotating the pod, use command <code>$ kubectl edit pod &lt;pod_name&gt; -n namespace</code></p>","activityList":[]},{"id":"10","name":"Why push the metrics in Dynatrace?","content":"<h2 id=\"whypushthemetricsindynatrace\">Why push the metrics in Dynatrace?</h2>\n<p>In this step, we will walk through the automatic baseline and uses of pushing prometheus metrics into Dynatrace. We will setup a synthetic browser in order to populate automatic baseline</p>\n<p>Once the metrics are being pushed in Dynatrace, the DAVIS AI engine will start digesting the information and identifying the baseline for the metrics. You can setup custom alerts (with auto-detective baseline) so that you don’t just get alerts but smart alerts.</p>\n<h3 id=\"populatebaselineusingsyntheticmonitors\">Populate Baseline using Synthetic Monitors</h3>\n<p>Dynatrace uses real-time traffic to generate a baseline for the pivotal parameters like response-time, error-rate, throughput and etc for the service or application. So, in order to generate some traffic, we will setup the HTTP monitor which would result DAVIS to generate a baseline.</p>\n<p>In your Dynatrace tenant, navigate to \"Synthetic\" and click on \"Create synthetic monitor\". Further, click on \"Create an HTTP monitor\"</p>\n<p><img src=\"assets/create-http-monitor.png\" alt=\"image\" /></p>\n<p>Follow these steps to configure the monitor:</p>\n<ol>\n<li>Name this HTTP monitor: Prometheus-setup-1</li>\n<li>Click “Add HTTP request”</li>\n<li>Request type: HTTP request</li>\n<li>HTTP Request URL: :30005/login - Replace the AWS-IP with your machine IP</li>\n<li>Name: Sample-app</li>\n<li>Click on “Add HTTP request”</li>\n</ol>\n<p><img src=\"assets/create-http-monitor-2.png\" alt=\"image\" /><br><br></p>\n<p>HTTP monitors can be scheduled to run from Dynatrace's private synthetic location and scheduled to run in configurable time intervals. For this setup, configure the HTTP monitor to run every <strong>1 minute</strong> from any <strong>two</strong> available locations.\n<br><br>\n<img src=\"assets/create-http-monitor-3.png\" alt=\"image\" /></p>\n<p>Once configured, Dynatrace will fire the HTTPS-requests on the service, which will generate traffic. To view the generated requests, navigate to <strong>Transactions & Services > node-bank</strong> service. The traffic will be used by DAVIS to determine the baseline of the service or the requests.</p>","activityList":[]},{"id":"11","name":"Setup Custom Alerts (With Auto-Detective baseline)","content":"<h2 id=\"setupcustomalertswithautodetectivebaseline\">Setup Custom Alerts (With Auto-Detective baseline)</h2>\n<p>In this step, we will setup a custom-alert to alert us when the automatic baseline has been breached for the Prometheus metric(s)</p>\n<p>Setup a custom alert with an auto-detective baseline so that the AI engine would determine the threshold after studying the trend and behaviour of the metrics. To setup a custom alert</p>\n<p><img src=\"assets/createCustom-event-1.png\" alt=\"image\" /></p>\n<p>All the metrics which were pushed into Dynatrace are now available in the metrics drop-down menu. Select the metrics that you would like to set a custom event for. In this case we will be using\n<code>mongodb_network_metrics_num_requests_total.count</code>.</p>\n<p><img src=\"assets/createCustom-event-2.png\" alt=\"image\" /></p>\n<p>Further, scroll down to <strong>Monitoring strategy</strong> and configure the following:</p>\n<ol>\n<li>Alert-type: Auto-adaptive baseline</li>\n<li>Configure to be alerted if the metric is above the baseline for 1 mins during 3 minutes window**</li>\n<li>Select Alert to ensure you are notified if data is missing.</li>\n</ol>\n<p><img src=\"assets/createCustom-event-3.png\" alt=\"image\" /></p>\n<ol start=\"4\">\n<li>Name the title “Prometheus-custom-alert”</li>\n<li>Click on “Create custom event for alerting”</li>\n</ol>\n<p><img src=\"assets/createCustom-event-4.png\" alt=\"image\" /></p>\n<p>Positive\n: Dynatrace would indicate the number of alerts you would have received as per the baseline and the configuration under \"Alert Preview\" section so that you can fine-tune the settings in order to avoid alert storm.</p>","activityList":[]},{"id":"12","name":"Trigger an alert","content":"<h2 id=\"triggeranalert\">Trigger an alert</h2>\n<p>In this step, let us simulate load by executing a load-script so that the automatic threshold is breached, thereby, triggering an alert.</p>\n<p>Navigate back to your EC2 instance command line and change the directory to <code>/home/ubuntu/k8s</code>. You will find the file named \"simulate-alert.py\".</p>\n<p>Run the file as displayed below:</p>\n<pre><code class=\"hljs\">$ <span class=\"hljs-keyword\">python3</span>.<span class=\"hljs-number\">8</span> simulate-alert.<span class=\"hljs-keyword\">py</span> AWS-IP port-<span class=\"hljs-keyword\">number</span>\n</code></pre>\n<blockquote>\n  <p><strong>Note</strong>: To run this file you will need to replace the AWS-IP with your public-IP and replace the port-number with the NodePort where the application is listening.</p>\n</blockquote>\n<p>Once the script is executed, it would fire multiple requests parallely on the application. This will trigger an alert similar to the below:\n<img src=\"assets/alert1.png\" alt=\"image\" /></p>","activityList":[]}]